plugins {
	id 'application'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'

	id 'com.github.johnrengelman.processes' version '0.5.0'
	id 'org.springdoc.openapi-gradle-plugin' version '1.7.0'

	id 'org.siouan.frontend-jdk11' version '6.0.0'
	id 'jacoco'
}

group = 'hexlet.code'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '20'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

compileJava {
	options.release = 20
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation(
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-data-jdbc',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-jdbc',
			'org.springframework.boot:spring-boot-starter-thymeleaf',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-devtools',
			'io.jsonwebtoken:jjwt-api:0.11.5',
			'org.springframework.boot:spring-boot-starter-security',
			"net.datafaker:datafaker:2.0.1",
			"org.instancio:instancio-junit:3.3.0",
			"com.querydsl:querydsl-core:5.0.0",
			"com.querydsl:querydsl-jpa:5.0.0:jakarta",
			"org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0",
			'org.springframework.boot:spring-boot-starter-test')

	runtimeOnly (
			'io.jsonwebtoken:jjwt-impl:0.11.5',
			'io.jsonwebtoken:jjwt-jackson:0.11.5',
			'com.h2database:h2',
			'org.postgresql:postgresql')

	compileOnly 'org.projectlombok:lombok'

	annotationProcessor (
			"com.querydsl:querydsl-apt:5.0.0:jakarta",
			"jakarta.persistence:jakarta.persistence-api:3.1.0",
			'org.projectlombok:lombok')

	testImplementation (
			'com.github.database-rider:rider-junit5:1.36.0',
			platform("org.junit:junit-bom:5.10.0"),
			"org.junit.jupiter:junit-jupiter:5.10.0",
			"org.springframework.boot:spring-boot-starter-test",
			"org.springframework.security:spring-security-test",
			"net.javacrumbs.json-unit:json-unit-assertj:3.2.2",
			'org.springframework.boot:spring-boot-starter-test')
}

tasks.named('test') {
	useJUnitPlatform()
}

task stage(dependsOn: ['clean', 'installDist'])

jacocoTestReport {
	reports {
		xml.required = true
	}
}

test {
	finalizedBy jacocoTestReport
}
jacocoTestReport {
	dependsOn test
}

checkstyle {
	toolVersion '10.12.1'
}

checkstyleMain.source = "src/main/java"
checkstyleTest.source =  "src/test/java"

application {
	mainClass = 'hexlet.code.AppApplication'
}

wrapper{
	gradleVersion = '8.3'
}
// FRONTEND ////////////////////
////////////////////////////////
frontend {
	nodeVersion = '16.13.1'
	installScript = 'install'
	assembleScript = 'run build'
	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
	configure configFrontendTasks

	doLast {
		copy {
			from "$projectDir/frontend/build"
			into "$buildDir/resources/main/static"
		}
	}
}

installFrontend {
	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend

openApi {
	apiDocsUrl.set("http://localhost:8080/api-docs")
}
